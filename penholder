/* Dexter HD End Effector blank.
Subtract this from any part to make it slide onto the end effector
*/

function getParameterDefinitions() {
    return[
        {name: "penRadius", type: "int", initial: 4, min: 0, max: 99, caption: "Pen Radius"},
        {name: "tipRadius", type: "int", initial: 3, min: 0, max: 99, caption: "Tip Radius"},
        {name: "cubeW", type: "int", initial: 30, min: 0, max: 99, caption: "Width"},
        {name: "extraL", type: "int", initial: 0, min: 0, max: 99, caption: "Extra Length"}
    ];
}

function main() { 
    var w = 7.5;
    var h = 15;
    var penRadius = params.penRadius;
    var tipRadius = params.tipRadius;
    var cubeW = params.cubeW;
    var extraL = params.extraL;
    
    if(tipRadius >= penRadius) {
        tipRadius = penRadius * 0.75;
    }
    
    return difference(
        translate([-13 - penRadius * 2.1 - extraL, -cubeW / 2, 0],
            cube([16 + penRadius * 2.1 + extraL, cubeW, h])
        ),
        union(
            translate([-w - penRadius - extraL, 0, h / 6],
                cylinder({r: penRadius, h: h * 5 / 6})
            ),
            translate([-w - penRadius - extraL, 0, 0],
                cylinder({r: tipRadius, h: h / 6})
            )
        ),
        union(
            rotate([0, 0, 45],
                translate([-w / 2, -w / 2, 0],
                    color("black",
                        cube([w, w, h])
                    )
                )
            ),
            translate([0, -w / 2, 0],
                color("black",
                    cube([w / 2, w, h])
                )
            ),
            translate([-13.5, -15, -3],
                color("black",
                    cube([20, 40, 3])
                )
            ),
            rotate([0, 90, 0],
                translate([-15, -15, 3.5],
                    color("black",
                        cube([15, 40, 3])
                    )
                )
            )
        )
    );
}
